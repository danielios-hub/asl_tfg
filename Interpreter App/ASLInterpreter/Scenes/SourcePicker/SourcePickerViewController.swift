//
//  SourcePickerViewController.swift
//  ASLInterpreter
//
//  Created by Daniel Gallego Peralta on 27/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation

protocol SourcePickerDisplayLogic: class {
    func displaySources(viewModel: SourcePicker.LoadSources.ViewModel)
}

protocol SourcePickerDelegate: class {
    func didSelectLiveCamera()
    func didSelectLibrary()
    func didSelectiCloud()
}

class SourcePickerViewController: UIViewController, SourcePickerDisplayLogic {
    var interactor: SourcePickerBusinessLogic?
    var router: (NSObjectProtocol & SourcePickerRoutingLogic & SourcePickerDataPassing)?
    
    lazy var configButton: UIButton = {
        let button = UIButton(type: .custom)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setImage(UIImage(symbol: .gear), for: .normal)
        let pointSize: CGFloat = 50
        button.setPreferredSymbolConfiguration(UIImage.SymbolConfiguration(pointSize: pointSize), forImageIn: .normal)
        button.addTarget(self, action: #selector(goToConfig(_:)), for: .touchUpInside)
        return button
    }()
    
    let videoPicker = UIImagePickerController()
    
    var sourcePickerView: SourcePickerView! {
        guard isViewLoaded else {
            return nil
        }
        return (view as! SourcePickerView)
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SourcePickerInteractor()
        let presenter = SourcePickerPresenter()
        let router = SourcePickerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        loadSources()
    }
    
    override func loadView() {
        view = SourcePickerView()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        //didSelectLiveCamera()
    }
    
    func setupView() {
        self.navigationController?.setNavigationBarHidden(true, animated: false)
        
        self.view.addSubview(configButton)
        let iconSize: CGFloat = 40
        let margin: CGFloat = 10
        NSLayoutConstraint.activate ( [
            configButton.widthAnchor.constraint(equalToConstant: iconSize),
            configButton.heightAnchor.constraint(equalToConstant: iconSize),
            configButton.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: margin),
            configButton.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -margin)
        ])
    }
    
    //MARK: - Actions
    
    @objc func goToConfig(_ sender: UIButton) {
        router?.routeToConfiguration()
    }

}

//MARK: - Ouptput

extension SourcePickerViewController {
    
    func loadSources() {
        let request = SourcePicker.LoadSources.Request()
        interactor?.doLoadSources(request: request)
    }
    
}

//MARK: - Input

extension SourcePickerViewController {
    
    func displaySources(viewModel: SourcePicker.LoadSources.ViewModel) {
        sourcePickerView.addSources(sources: viewModel.sources)
        sourcePickerView.delegate = self
    }
}

//MARK: - Source Picker delegate

extension SourcePickerViewController: SourcePickerDelegate {
    func didSelectLiveCamera() {
        print("live")
        self.interactor?.videoAsset = nil
        self.router?.routeToManagerViewController()
    }
    
    func didSelectLibrary(){
        print("library")
        videoPicker.mediaTypes = ["public.movie"]
        videoPicker.delegate = self
        videoPicker.sourceType = .photoLibrary
        videoPicker.allowsEditing = false
        videoPicker.videoQuality = .typeHigh
        present(videoPicker, animated: true, completion: nil)
    }
    
    func didSelectiCloud() {
        print("icloud")
        let docPicker = UIDocumentPickerViewController(forOpeningContentTypes: [.movie],
                                                       asCopy: true)
        docPicker.delegate = self
        present(docPicker, animated: true)
    }
}

//MARK: - UIDocumentPickerDelegate

extension SourcePickerViewController: UIDocumentPickerDelegate {
    
    func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
        
    }
    
    func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
        guard let url = urls.first else {
            return
        }
        self.interactor?.videoAsset = AVAsset(url: url)
        self.router?.routeToManagerViewController()
    }
}

//MARK: - UIImagePicker Delegate

extension SourcePickerViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true, completion: nil)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        picker.dismiss(animated: true) { [unowned self] in
            if let url = info[.mediaURL] as? URL {
                self.interactor?.videoAsset = AVAsset(url: url)
                self.router?.routeToManagerViewController()
            }
        }
    }
    
}
