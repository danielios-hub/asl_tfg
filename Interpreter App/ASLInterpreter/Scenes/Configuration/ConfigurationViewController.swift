//
//  ConfigurationViewController.swift
//  ASLInterpreter
//
//  Created by Daniel Gallego Peralta on 2/4/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ConfigurationDisplayLogic: class {
    func displayItems(viewModel: ConfigurationScene.LoadItems.ViewModel)
    func displaySaveItems(viewModel: ConfigurationScene.SaveItems.ViewModel)
}

class ConfigurationViewController: UIViewController, ConfigurationDisplayLogic {
    var interactor: ConfigurationBusinessLogic?
    var router: (NSObjectProtocol & ConfigurationRoutingLogic & ConfigurationDataPassing)?
    
    private var configurationView: ConfigurationView! {
        guard isViewLoaded else {
            return nil
        }
        return (view as! ConfigurationView)
    }
    
    private var tableView: UITableView {
        return configurationView.tableView
    }
    
    var items = [ConfigurationItem]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ConfigurationInteractor()
        let presenter = ConfigurationPresenter()
        let router = ConfigurationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    override func loadView() {
        super.loadView()
        view = ConfigurationView()
    }
    
    private func setupView() {
        title = "Preferences"
        
        navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .cancel, target: self, action: #selector(closeAction(_:)))
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(savePreferences(_:)))
        tableView.dataSource = self
        tableView.delegate = self
        loadItems()
    }
    
    private func reloadData() {
        self.tableView.reloadData()
    }
    
    //MARK: - Actions
    
    @objc func savePreferences(_ sender: UIBarButtonItem) {
        saveOptions()
    }
    
    @objc func closeAction(_ sender: UIBarButtonItem) {
        router?.routeToBack()
    }
    
}

//MARK: - Output

extension ConfigurationViewController {
    
    func loadItems() {
        interactor?.doLoadItems(request: ConfigurationScene.LoadItems.Request())
    }
    
    func saveOptions() {
        interactor?.doSaveItems(request: ConfigurationScene.SaveItems.Request(items: items))
    }
}

//MARK: - Input

extension ConfigurationViewController {
    
    func displayItems(viewModel: ConfigurationScene.LoadItems.ViewModel) {
        self.items = viewModel.items
        reloadData()
    }
    
    func displaySaveItems(viewModel: ConfigurationScene.SaveItems.ViewModel) {
        router?.routeToBack()
    }
}



extension ConfigurationViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let item = items[indexPath.row]
        
        var cell: BaseConfigurationCell?
        
        switch item.type {
        case .handDetectionMinConfidence, .letterDetectionMinConfidence:
            cell = tableView.dequeueReusableCell(withIdentifier: ConfigurationSliderViewCell.getIdentifier(), for: indexPath) as? BaseConfigurationCell
        case .minLettersToCompare, .minOcurrences:
            cell = tableView.dequeueReusableCell(withIdentifier: StepperViewCell.getIdentifier(), for: indexPath) as? BaseConfigurationCell
        case .handCase, .model, .mode:
            cell = tableView.dequeueReusableCell(withIdentifier: ConfigurationPickerViewCell.getIdentifier(), for: indexPath) as? BaseConfigurationCell
        case .debug, .isFilterHandbyMid, .isTextChecker:
            cell = tableView.dequeueReusableCell(withIdentifier: SwitchViewCell.getIdentifier(), for: indexPath) as? BaseConfigurationCell
        case .reset:
            cell = tableView.dequeueReusableCell(withIdentifier: ButtonViewCell.getIdentifier(), for: indexPath) as? ButtonViewCell
            cell?.onDone = { [weak self ] in
                ASLConfiguration.shared.setDefaultValues()
                self?.view.makeToast("Reset to defaults values")
                self?.loadItems()
            }
        }
        
        cell?.item = item
        cell?.selectionStyle = .none
        return cell ?? UITableViewCell()
    }
}

extension ConfigurationViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 70.0
    }
}
