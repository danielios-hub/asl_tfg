//
//  ConfigurationModels.swift
//  ASLInterpreter
//
//  Created by Daniel Gallego Peralta on 2/4/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum ConfigurationScene {
    // MARK: Use cases
    
    enum LoadItems {
        struct Request {
        }
        struct Response {
            let items: [ConfigurationItem]
        }
        struct ViewModel {
            let items: [ConfigurationItem]
        }
    }
    
    enum SaveItems {
        struct Request {
            let items: [ConfigurationItem]
        }
        struct Response {}
        struct ViewModel {}
    }
    
    static func getItemsConfiguration() ->[ConfigurationItem] {
        let handOptions = [
            SelectBox(text: "Left", value: ASLConfiguration.HandCase.left),
            SelectBox(text: "Right", value: ASLConfiguration.HandCase.right)
        ]
        
        let modelOptions = ASLConfiguration.ASLModel.allCases.map {
            return SelectBox(text: $0.rawValue, value: $0)
        }
        
        let modeOptions = ASLConfiguration.WorkingMode.allCases.map {
            return SelectBox(text: $0.rawValue, value: $0)
        }
        
        let items : [ConfigurationItem] = [
            ConfigurationItem(title: "Minimal hand confidence", value: ASLConfiguration.shared.handDetectionMinConfidence, options: [], type: .handDetectionMinConfidence),
            ConfigurationItem(title: "Minimal letter confidence", value: ASLConfiguration.shared.letterDetectionMinConfidence, options: [], type: .letterDetectionMinConfidence),
            ConfigurationItem(title: "Mode", value: ASLConfiguration.shared.workingMode, options: modeOptions, type: .mode),
            ConfigurationItem(title: "TextChecker", value: ASLConfiguration.shared.isTextCheckerEnabled, options: [], type: .isTextChecker),
            ConfigurationItem(title: "Minimum letters to compare results", value: ASLConfiguration.shared.minLettersToCompare, options: [], type: .minLettersToCompare),
            ConfigurationItem(title: "Minimum occurrences of letters detected", value: ASLConfiguration.shared.minOcurrences, options: [], type: .minOcurrences),
            ConfigurationItem(title: "Filter hand by mid X coordinate", value: ASLConfiguration.shared.isHandFilterByMidX, options: [], type: .isFilterHandbyMid),
            ConfigurationItem(title: "Hand", value: ASLConfiguration.shared.handCase, options: handOptions, type: .handCase),
            ConfigurationItem(title: "Model", value: ASLConfiguration.shared.model, options: modelOptions, type: .model),
            ConfigurationItem(title: "Debug", value: ASLConfiguration.shared.isDebugMode, options: [], type: .debug),
            ConfigurationItem(title: "Reset to defaults", value: 0, options: [], type: .reset)
        ]
        
        return items
    }
}

class ConfigurationItem {
    let title: String
    var value: Any
    let options: [SelectBox]
    let type: ConfigurationType
    
    init(title: String, value: Any, options: [SelectBox], type: ConfigurationType) {
        self.title = title
        self.value = value
        self.options = options
        self.type = type
    }
}

struct SelectBox: Equatable {
    var text: String
    var value: Any
    
    static func ==(lhs: SelectBox, rhs: SelectBox) -> Bool {
        return lhs.text == rhs.text
    }
}

enum ConfigurationType {
    case handDetectionMinConfidence
    case letterDetectionMinConfidence
    case isTextChecker
    case mode
    case minLettersToCompare
    case minOcurrences
    case isFilterHandbyMid
    case handCase
    case model
    case debug
    case reset
}
