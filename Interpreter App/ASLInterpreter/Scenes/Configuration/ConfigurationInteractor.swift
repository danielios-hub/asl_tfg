//
//  ConfigurationInteractor.swift
//  ASLInterpreter
//
//  Created by Daniel Gallego Peralta on 2/4/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ConfigurationBusinessLogic {
    func doLoadItems(request: ConfigurationScene.LoadItems.Request)
    func doSaveItems(request: ConfigurationScene.SaveItems.Request)
}

protocol ConfigurationDataStore {
    var completionBlock: (() -> Void)? { get set }
}

class ConfigurationInteractor: ConfigurationBusinessLogic, ConfigurationDataStore {
    var presenter: ConfigurationPresentationLogic?
    var worker: ConfigurationWorker?
    var completionBlock: (() -> Void)?
  
    
    func doLoadItems(request: ConfigurationScene.LoadItems.Request) {
        let response = ConfigurationScene.LoadItems.Response(items: ConfigurationScene.getItemsConfiguration())
        presenter?.presentItems(response: response)
    }
    
    func doSaveItems(request: ConfigurationScene.SaveItems.Request) {
        request.items.forEach { item in
            switch item.type {
            case .handDetectionMinConfidence:
                if let floatValue = item.value as? Float {
                    ASLConfiguration.shared.handDetectionMinConfidence = floatValue
                }
            case .letterDetectionMinConfidence:
                if let floatValue = item.value as? Float {
                    ASLConfiguration.shared.letterDetectionMinConfidence = floatValue
                }
            case .mode:
                if let workingMode = item.value as? ASLConfiguration.WorkingMode {
                    ASLConfiguration.shared.workingMode = workingMode
                }
            case .isTextChecker:
                if let boolValue = item.value as? Bool {
                    ASLConfiguration.shared.isTextCheckerEnabled = boolValue
                }
            case .minLettersToCompare:
                if let intValue = item.value as? Int {
                    ASLConfiguration.shared.minLettersToCompare = intValue
                }
            case .minOcurrences:
                if let intValue = item.value as? Int {
                    ASLConfiguration.shared.minOcurrences = intValue
                }
            case .isFilterHandbyMid:
                if let boolValue = item.value as? Bool {
                    ASLConfiguration.shared.isHandFilterByMidX = boolValue
                }
            case .handCase:
                if let handCase = item.value as? ASLConfiguration.HandCase {
                    ASLConfiguration.shared.handCase = handCase
                }
            case .model:
                if let model = item.value as? ASLConfiguration.ASLModel {
                    ASLConfiguration.shared.model = model
                }
            case .debug:
                if let boolValue = item.value as? Bool {
                    ASLConfiguration.shared.isDebugMode = boolValue
                }
            default: break
            }
        }
        
        presenter?.presentSaveItems(response: ConfigurationScene.SaveItems.Response())
    }
}
